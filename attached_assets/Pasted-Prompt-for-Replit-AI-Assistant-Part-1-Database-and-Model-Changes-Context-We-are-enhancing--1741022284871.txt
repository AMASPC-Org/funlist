Prompt for Replit AI Assistant (Part 1 - Database and Model Changes):

Context:
We are enhancing the FunList.ai event detail page (event_detail.html). We want to add more information related to the Fun Rating and provide a clearer description of the target audience. This first prompt focuses on the backend changes (database and model). Images of the current page have been provided.

Instructions:

Review models.py: Examine the Event model. Note the existing fields.

Add fun_rating_justification: Add a new field called fun_rating_justification to the Event model. This should be a db.Text field (allowing for longer text). It should be nullable (not all events need a detailed justification, especially initially).

Add target_audience_description: Add a new field called target_audience_description to the Event model. This should also be a db.Text field and be nullable.

Database Migration: After making the model changes, create a database migration using Flask-Migrate. Provide the exact commands to run in the Replit shell to generate and apply the migration.

Review forms.py: Examine the EventForm model. Add fields that are associated with the newly created fields in the Event model.

Routes Update: Ensure that the routes associated with this form take the new information and correctly apply it.

Review Signup Form: Ensure that users can select from the following during signup: Single, Family, Parents, Adult, 21+, Senior, or Professional. Update the SignupForm and ProfileForm and associated routes.py and HTML page, and database.

Verify: Provide a way to check the routes are working

Prompt for Replit AI Assistant (Part 2 - Frontend Changes):

Context:

This is a continuation of the previous prompt. We've made the necessary backend changes (database and model). Now, we're focusing on updating the event detail page (event_detail.html) to display the new information.

Instructions:

Review event_detail.html: Examine the current template. Understand how the existing event information is displayed.

Display fun_rating_justification:

Add a new section to the page, clearly labeled (e.g., "Why This Rating?").

Display the content of the event.fun_rating_justification field within this section.

If the field is empty, you can either hide the section entirely or display a default message (e.g., "Rating details coming soon!").

Consider using Bootstrap's card component or similar for visual structure.

Display target_audience_description:

Add another new section, clearly labeled (e.g., "Who Will Enjoy This Event?").

Display the content of the event.target_audience_description field.

If the field is empty, you can hide the section or display a default message.

Consider using a different visual style than the "Why This Rating?" section to differentiate them.

Map Issue: The provided image shows a duplicated map. Identify and remove the duplicate map element. There should be only one map displayed.

Styling and Layout:

Ensure the new sections are visually appealing and consistent with the rest of the page.

Use appropriate spacing, headings, and text formatting.

Consider using Bootstrap classes for consistent styling.

Mobile Responsiveness: Test the page on different screen sizes to ensure it remains responsive.

Output (for both prompts):

Part 1:

Exact commands for database migration.

Changes to model and forms.

Confirmation of the routes

Part 2:

The modified event_detail.html code (or specific code snippets with clear instructions on where to insert them).

Any CSS changes (if necessary) in custom.css.