Prompt for Replit AI Assistant:

Context:

We're continuing to develop the FunList.ai platform. This task focuses on improving the admin user management section within the Replit environment. The admin (currently, only ryan@funlist.ai has admin access) needs to be able to easily view and manage different types of users: subscribers, event creators, organizers, vendors, and potentially venues (although we haven't fully defined the "venue" role yet). We need to update the admin dashboard and associated routes/templates to reflect these requirements. Before any code changes, perform a code review of all relevant files.

Instructions:

Admin Dashboard Navigation:

Existing Structure: Review the existing admin dashboard (admin_dashboard.html and the /admin/dashboard route in routes.py). Understand how the current tabs ("overview," "events," "users," "analytics") are implemented.

User Management Sub-Navigation: Within the "Users" tab (or a similarly named section), add sub-navigation options to filter users by type. These options should include (at a minimum):

All Users

Subscribers

Event Creators

Organizers

Vendors

(Optional, for now) Venues - If a "Venues" role doesn't yet exist, you can add a placeholder for it, but don't implement full functionality.

Implementation: Use Bootstrap's navigation components (navs, tabs, or a similar approach) for the sub-navigation. Ensure the UI is clear, intuitive, and consistent with the rest of the dashboard.

Template Changes: Update admin_dashboard.html (and potentially other related templates) to include the new sub-navigation.

Route Updates (Admin User Management):

Filtering Logic: Modify the /admin/users route (or create separate routes, e.g., /admin/users/subscribers, /admin/users/organizers, etc. - choose the approach that best fits the existing codebase and is most maintainable) to handle filtering users by type.

Query Parameters: Use query parameters (e.g., /admin/users?type=organizer) to specify the user type filter.

Database Queries: Update the database queries within the route(s) to filter users based on the selected type. Use the is_subscriber, is_event_creator, is_organizer, is_vendor, and (potentially) is_venue boolean fields in the User model. Remember, a user can have multiple roles.

Example (using query parameters):

@app.route("/admin/users")
@login_required
def admin_users():
    if current_user.email != 'ryan@funlist.ai':
        flash("Access denied.", "danger")
        return redirect(url_for("index"))

    user_type = request.args.get('type', 'all')  # Default to 'all'

    if user_type == 'all':
        users = User.query.order_by(User.created_at.desc()).all()
    elif user_type == 'subscribers':
        users = User.query.filter_by(is_subscriber=True).order_by(User.created_at.desc()).all()
    elif user_type == 'event_creators':
        users = User.query.filter_by(is_event_creator=True).order_by(User.created_at.desc()).all()
   # ... and so on for other user types ...
    else:
        users = User.query.order_by(User.created_at.desc()).all()  #default

    return render_template("admin_users.html", users=users, user_type=user_type)
Use code with caution.
Python
Template adjustments: Update the admin_users.html to reflect the type of user in the filter

Template Updates (Admin User List):

Display User Type: Modify the admin_users.html template (or the relevant template if you've created separate routes) to clearly display the type(s) of each user in the list. For example, you might add a column that shows "Subscriber, Event Creator, Vendor" for a user with all three roles.

Consistent Styling: Ensure the user list is styled consistently with the rest of the admin dashboard. Use Bootstrap tables or similar components.

Profile Icon Dropdown: The requirement mentions "profile icon dropdown." There isn't enough context for me to know what exactly needs to be done here without more info. We can either make the requested adjustments to the admin user's area to display the other account types they have access to or ignore this request for now.

Codebase-Wide Review:

Consistency: Ensure that the changes are consistent throughout the codebase. For example, if you change how user types are displayed in the admin dashboard, make sure they are displayed similarly in other relevant areas (if any).

Redundancy: Avoid unnecessary code duplication. If you have utility functions or helper methods for handling user types, use them consistently.

General Considerations:

Error Handling: Include appropriate error handling (e.g., handling invalid user type filters).

Security: Ensure that only authorized administrators (currently, ryan@funlist.ai) can access the admin dashboard and perform these actions. You already have checks in place, but double-check them.

Maintainability: Write clean, well-documented code. Use comments to explain your logic and any non-obvious decisions.

Testing: Manually test the changes thoroughly. Try different user type filters and ensure that the correct users are displayed.