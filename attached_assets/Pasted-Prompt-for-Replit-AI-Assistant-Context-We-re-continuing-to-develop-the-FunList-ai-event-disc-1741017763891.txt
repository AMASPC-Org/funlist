Prompt for Replit AI Assistant:

Context:

We're continuing to develop the FunList.ai event discovery platform, specifically focusing on the Sign Up page (signup.html and related backend logic). The primary goal is to make the signup process as user-friendly and intuitive as possible, particularly for users who are primarily interested in finding events (the majority of users). We need to collect essential information (audience type, location preferences, event interests) in a way that is clear, efficient, and avoids overwhelming the user. We're working within the Replit environment. Remember to review the codebase thoroughly before implementing any changes.

Previous Instructions (Summary):

Database/Model Updates: Add audience_type, preferred_locations, and event_interests fields to the User model.

Form Updates: Modify SignupForm and ProfileForm to include these fields, using appropriate SelectField (for audience type) and StringField (for locations and interests) types, along with relevant validators.

Route Updates: Update the /signup and /profile/edit routes to handle the new data correctly.

(Optional) Post-Registration Wizard: Adapt the wizard to collect the same information.

Considerations for Freemium and Geographic features (but no implementation).

New Instructions (Specific to this Prompt):

"Audience Type" Clarity and Multi-Select:

Contextual Sentence: Add a sentence above the "Audience Type" field in the signup.html template to provide context. Use phrasing similar to: "Tell us who you are so we can match you with the right events." Use appropriate Bootstrap classes for styling (e.g., a <p> tag with text-muted or similar).

Multi-Select: Change the audience_type field in SignupForm (and ProfileForm if it exists there) from a SelectField to a SelectMultipleField. This allows users to select multiple options. Update the database field accordingly if needed for data type. Important: Since we're storing this as a comma-separated string, ensure the code that handles this data (in the routes) correctly joins and splits the selected values. For example, if a user selects "Single" and "Professional", the stored value should be "single,professional".

Database Considerations: Verify the User model's audience_type field can store comma separated strings.

"Event Interests" Dynamic Population:

Typeahead Functionality: Implement typeahead/autocomplete functionality for the event_interests field. As the user types, suggest matching event categories.

Implementation Options:

Option A (Simpler): If you're familiar with a JavaScript library like Select2 or similar, use it to provide the typeahead functionality. This is the recommended approach for ease of implementation and a good user experience. You'll need to include the library's CSS and JavaScript files (likely via CDN links in base.html).

Option B (More Complex): Implement a custom solution using JavaScript's fetch API to query an endpoint (e.g., /api/event-categories) that returns a list of matching categories. This is more complex but avoids external dependencies.

Category Source: For now, you can define a static list of event categories within the SignupForm (or in a separate utility function/file). Later, we can make this dynamic (fetching from the database). Example categories: ['Sports', 'Music', 'Arts', 'Food & Drink', 'Outdoors', 'Nightlife', 'Family', 'Kids', 'Seniors', 'Workshops', 'Conferences', 'Networking', 'Other'].

Template Changes: Update the template to include the typeahead changes.

"I'm here to..." Dynamic Form (Conditional Fields):

Initial Question: Add a new SelectField at the top of the SignupForm labeled "I'm here to...". The choices should be: ('', 'Select an option...'), ('find_events', 'Find Events'), ('create_events', 'Create Events'), ('represent_organization', 'Represent an Organization'), ('vendor_services', 'Offer Vendor Services').

Conditional Logic (JavaScript): Use JavaScript to dynamically show/hide relevant form fields based on the user's selection. For example:

If "Find Events" is selected, show the "Audience Type," "Preferred Locations," and "Event Interests" fields.

If "Create Events" is selected, potentially show additional fields related to event creation (though we already have separate forms for this â€“ consider this carefully).

If "Represent an Organization" or "Offer Vendor Services" is selected, you might redirect the user to the appropriate profile setup page (/organizer-profile or /vendor-profile) after basic registration.

Template Changes: Update the signup.html to include the new field and add appropriate id attributes or data attributes to the form fields that need to be shown/hidden conditionally.

Password Visibility Toggle:

"View" Icon: Add an "eye" icon (using Font Awesome or a similar icon library) next to the password fields (password and confirm_password) in the SignupForm (and LoginForm, and ResetPasswordForm if appropriate).

JavaScript Toggle: Use JavaScript to toggle the type attribute of the password input field between "password" and "text" when the icon is clicked. This will show/hide the password.

Security Note: This is a standard usability feature. It does not compromise security as long as you're using proper password hashing on the backend (which you should already be doing with werkzeug.security).

Template changes: Update signup.html, login.html, and reset_password.html.

Routes.py Logic Make sure to update the routes.py to account for the multi-select form changes, the dynamic form if/else handling, the signup data capture

General Considerations:

Mobile Responsiveness: Ensure all changes are responsive and work correctly on both desktop and mobile devices. Use Bootstrap's grid system and utility classes to achieve this.

Logged-In vs. Not Logged-In: The signup page should only be accessible to users who are not logged in. You already have logic in the /signup route to handle this (if current_user.is_authenticated). Make sure this continues to work correctly.

Best Practices:

Clear Labels and Help Text: Provide clear and concise labels for all form fields. Use help text (e.g., <small> tags) to provide additional context or instructions.

Error Handling: Display validation errors clearly and prominently.

Accessibility: Ensure the form is accessible to users with disabilities (e.g., use proper ARIA attributes if necessary).

Usability: Make the form as easy to use as possible. Minimize the number of required fields, use appropriate input types, and provide clear feedback to the user.

Code Review: Before implementing, carefully review the existing codebase (especially forms.py, signup.html, routes.py, and any relevant JavaScript files) to avoid conflicts and ensure consistency.

Dependencies: Make sure you consider the changes above and any new dependencies, like a library for dynamic form fields and handling.