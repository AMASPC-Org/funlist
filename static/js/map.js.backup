// Map handling module for FunList.ai
window.FunlistMap = (function() {
  'use strict';

  // Private variables
  let mapInstance = null;
  const defaultLocation = [47.0379, -122.9007]; // Default to Olympia, WA
  const defaultZoom = 11;
  let markersList = [];
  let markers = L.layerGroup();
  let userMarker = null;
  
  // Store event ID to marker mapping
  let eventMarkers = {};

  // Initialize map on the specified element
  function initMap(elementId) {
    console.log("Initializing map in element:", elementId);

    // Check if Leaflet is loaded
    if (typeof L === 'undefined') {
      console.error("Leaflet library not loaded yet. Cannot initialize map.");
      return null;
    }

    // Check if element exists
    const mapElement = document.getElementById(elementId);
    if (!mapElement) {
      console.error("Map container element not found:", elementId);
      return null;
    }

    try {
      // Create the map instance
      mapInstance = L.map(elementId, {
        center: defaultLocation,
        zoom: defaultZoom,
        zoomControl: true
      });

      // Try multiple tile providers to ensure one works
      try {
        console.log("Attempting to add tile layers to map");
        
        // Create an array of tile layer options in order of preference
        const tileLayerOptions = [
          // First option: OpenStreetMap
          {
            url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
            options: {
              attribution: 'Â© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
              maxZoom: 19,
              crossOrigin: true,
              subdomains: ['a', 'b', 'c']
            },
            name: 'OpenStreetMap'
          },
          // Second option: CartoDB Light
          {
            url: 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png',
            options: {
              attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
              subdomains: 'abcd',
              maxZoom: 20,
              crossOrigin: true
            },
            name: 'CartoDB'
          },
          // Third option: Stamen Terrain
          {
            url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png',
            options: {
              attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
              maxZoom: 18,
              crossOrigin: true,
              subdomains: ['a', 'b', 'c']
            },
            name: 'Stamen Terrain'
          }
        ];
        
        // Track if any tile layer has been successfully added
        let tileLayerAdded = false;
        let currentTileIndex = 0;
        
        // Function to try the next tile provider
        function tryNextTileProvider() {
          if (currentTileIndex >= tileLayerOptions.length) {
            console.error('All tile providers failed, map may not display correctly');
            return;
          }
          
          // Get current tile option
          const tileOption = tileLayerOptions[currentTileIndex];
          console.log(`Trying tile provider ${currentTileIndex + 1}/${tileLayerOptions.length}: ${tileOption.name}`);
          
          // Create and add the tile layer
          const tileLayer = L.tileLayer(tileOption.url, tileOption.options);
          
          // Setup success handler
          tileLayer.on('load', function() {
            console.log(`Tile provider ${tileOption.name} loaded successfully`);
            tileLayerAdded = true;
          });
          
          // Setup error handler
          tileLayer.on('tileerror', function(error) {
            console.warn(`Tile provider ${tileOption.name} error:`, error);
            
            // Only try next provider if this one hasn't succeeded yet
            if (!tileLayerAdded) {
              mapInstance.removeLayer(tileLayer);
              currentTileIndex++;
              tryNextTileProvider();
            }
          });
          
          // Add to map
          tileLayer.addTo(mapInstance);
        }
        
        // Start with the first tile provider
        tryNextTileProvider();
        
      } catch (e) {
        console.error('Error adding tile layer:', e);
      }
      
      // Add the markers layer group to the map
      markers = L.layerGroup().addTo(mapInstance);
      
      // Set up map event listeners
      setupMapEventListeners(mapInstance);

      // Return the map instance
      return mapInstance;
    } catch (error) {
      console.error("Error initializing map:", error);
      return null;
    }
  }
  
  // Set up event listeners for the map
  function setupMapEventListeners(map) {
    if (!map) return;
    
    // When map is moved (panned or zoomed), update visible events
    map.on('moveend', function() {
      updateVisibleEvents(map);
    });
    
    // When map is initially loaded, update visible events
    map.on('load', function() {
      updateVisibleEvents(map);
    });
  }
  
  // Update the list of visible events based on map bounds
  function updateVisibleEvents(map) {
    if (!map) return;
    
    const bounds = map.getBounds();
    const visibleEventIds = [];
    
    // Check which markers are in the current view
    markersList.forEach(function(marker) {
      if (marker && marker.eventId && bounds.contains(marker.getLatLng())) {
        visibleEventIds.push(marker.eventId);
      }
    });
    
    // Update the visible events container with only visible events
    updateEventsList(visibleEventIds);
    
    // Update the counter
    const countElement = document.getElementById('event-count');
    if (countElement) {
      countElement.textContent = visibleEventIds.length + ' Events';
    }
    
    // Show/hide the "no events" message
    const noEventsMessage = document.getElementById('no-events-message');
    if (noEventsMessage) {
      noEventsMessage.style.display = visibleEventIds.length > 0 ? 'none' : 'block';
    }
  }
  
  // Update the events list based on visible event IDs
  function updateEventsList(visibleEventIds) {
    // Get all events from the hidden container
    const allEventsContainer = document.getElementById('all-events-container');
    const visibleEventsContainer = document.getElementById('visible-events-container');
    
    if (!allEventsContainer || !visibleEventsContainer) return;
    
    // Clear the current visible events
    while (visibleEventsContainer.firstChild) {
      if (visibleEventsContainer.firstChild.id !== 'no-events-message') {
        visibleEventsContainer.removeChild(visibleEventsContainer.firstChild);
      } else {
        break; // Keep the no-events-message
      }
    }
    
    // If no visible events, show the no events message
    if (visibleEventIds.length === 0) {
      return;
    }
    
    // Get all event cards from the hidden container
    const eventCards = allEventsContainer.querySelectorAll('.event-card');
    
    // Clone and add only the visible events to the visible container
    eventCards.forEach(function(card) {
      const eventId = card.getAttribute('data-event-id');
      if (visibleEventIds.includes(eventId)) {
        const cardClone = card.cloneNode(true);
        
        // Add click event listener to highlight corresponding marker
        cardClone.addEventListener('click', function(e) {
          if (e.target.tagName !== 'A') { // Don't trigger for links inside the card
            highlightMarker(mapInstance, eventId);
          }
        });
        
        visibleEventsContainer.appendChild(cardClone);
      }
    });
    
    // Insert advertisement after the 3rd card if we have enough events
    if (visibleEventIds.length >= 3) {
      const adCard = document.createElement('div');
      adCard.className = 'card mb-3 sponsored-card border-primary-subtle';
      adCard.innerHTML = `
        <div class="card-body">
          <div class="text-muted small mb-2">Advertisement</div>
          <div class="sponsored-content">
            <p>Sponsored Content - Advertisement space available</p>
          </div>
        </div>
      `;
      
      // Insert after the 3rd event card
      const thirdCard = visibleEventsContainer.children[2];
      if (thirdCard) {
        visibleEventsContainer.insertBefore(adCard, thirdCard.nextSibling);
      }
    }
  }

  // Add a marker to the map
  function addMarker(map, lat, lng, popupContent, eventId) {
    if (!map) {
      console.error("Map instance is null or undefined");
      return null;
    }

    try {
      const marker = L.marker([lat, lng]);

      if (popupContent) {
        marker.bindPopup(popupContent);
      }
      
      // Store the event ID with the marker for reference
      if (eventId) {
        marker.eventId = eventId;
        eventMarkers[eventId] = marker;
      }

      marker.addTo(markers);
      markersList.push(marker);
      
      // Add click handler to highlight corresponding event in the list
      marker.on('click', function() {
        if (eventId) {
          highlightEventCard(eventId);
        }
      });
      
      return marker;
    } catch (error) {
      console.error("Error adding marker:", error);
      return null;
    }
  }
  
  // Highlight an event marker on the map
  function highlightMarker(map, eventId) {
    if (!map || !eventId) return;
    
    const marker = eventMarkers[eventId];
    if (marker) {
      // Center the map on this marker
      map.panTo(marker.getLatLng());
      
      // Open the popup
      marker.openPopup();
      
      // Highlight the marker (you could add a visual effect here)
      // For example, bounce animation or different icon
    }
  }
  
  // Highlight an event card in the list
  function highlightEventCard(eventId) {
    if (!eventId) return;
    
    // Remove highlight from all cards
    document.querySelectorAll('.event-card').forEach(function(card) {
      card.classList.remove('highlighted');
    });
    
    // Add highlight to matched card
    const visibleCard = document.querySelector(`#visible-events-container .event-card[data-event-id="${eventId}"]`);
    if (visibleCard) {
      visibleCard.classList.add('highlighted');
      
      // Scroll the card into view
      visibleCard.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
  }
  
  // Clear all markers from the map
  function clearMarkers() {
    markers.clearLayers();
    markersList = [];
    eventMarkers = {};
  }
  
  // Filter markers based on criteria
  function filterMarkers(categoryFilter, dateFilter, funRatingFilter) {
    // Apply filters to markers based on given criteria
    if (!mapInstance) return;
    
    // Clear existing markers
    markers.clearLayers();
    markersList = [];
    eventMarkers = {};
    
    // Get all event cards from the hidden container
    const eventCards = document.querySelectorAll('#all-events-container .event-card');
    
    // Add markers that match the filter criteria
    eventCards.forEach(function(card) {
      // Get data from the event card
      const eventId = card.getAttribute('data-event-id');
      const lat = parseFloat(card.getAttribute('data-lat'));
      const lng = parseFloat(card.getAttribute('data-lng'));
      const category = card.getAttribute('data-category');
      const date = card.getAttribute('data-date');
      const funRating = parseInt(card.getAttribute('data-fun-rating'));
      
      // Apply filters
      let passesFilter = true;
      
      // Category filter
      if (categoryFilter && categoryFilter !== 'All Categories') {
        if (category.toLowerCase() !== categoryFilter.toLowerCase()) {
          passesFilter = false;
        }
      }
      
      // Fun rating filter
      if (funRatingFilter && funRatingFilter !== 'All Fun Ratings') {
        const minRating = parseInt(funRatingFilter);
        if (funRating < minRating) {
          passesFilter = false;
        }
      }
      
      // Date filter (simplified)
      if (dateFilter && dateFilter !== 'Any Date') {
        const eventDate = new Date(date);
        const today = new Date();
        
        if (dateFilter === 'Today') {
          if (eventDate.toDateString() !== today.toDateString()) {
            passesFilter = false;
          }
        } else if (dateFilter === 'Tomorrow') {
          const tomorrow = new Date(today);
          tomorrow.setDate(tomorrow.getDate() + 1);
          if (eventDate.toDateString() !== tomorrow.toDateString()) {
            passesFilter = false;
          }
        } else if (dateFilter === 'This Weekend') {
          // Get next Saturday and Sunday
          const dayOfWeek = today.getDay();
          const saturday = new Date(today);
          saturday.setDate(today.getDate() + (6 - dayOfWeek) % 7);
          const sunday = new Date(saturday);
          sunday.setDate(saturday.getDate() + 1);
          
          if (!(eventDate >= saturday && eventDate <= sunday)) {
            passesFilter = false;
          }
        }
      }
      
      // Add marker if it passes all filters
      if (passesFilter && !isNaN(lat) && !isNaN(lng)) {
        // Get the title and description for the popup
        const title = card.querySelector('.card-title').textContent;
        const description = card.querySelector('.card-text').textContent;
        
        // Create popup content
        const popupContent = `
          <div class="event-popup">
            <h5>${title}</h5>
            <p>${description}</p>
            <a href="/event/${eventId}" class="btn btn-sm btn-primary">View Details</a>
          </div>
        `;
        
        // Add marker
        addMarker(mapInstance, lat, lng, popupContent, eventId);
      }
    });
    
    // Update the events list based on the current map view
    updateVisibleEvents(mapInstance);
  }

  // Get user's location and center map
  function getUserLocation(map, callback) {
    if (!map) {
      console.error("Map instance is null or undefined");
      if (callback) callback(false, null);
      return;
    }
    
    // Force a resize of the map to ensure proper rendering
    setTimeout(function() {
      console.log("Forcing map resize");
      try {
        if (map && typeof map.invalidateSize === 'function') {
          console.log("Found Leaflet map instance, invalidating size");
          map.invalidateSize(true);
        } else {
          console.warn("Map not fully initialized yet or invalidateSize not available");
        }
      } catch (e) {
        console.error("Error resizing map:", e);
      }
    }, 500);

    // Event handler for when user location is found
    const dispatchLocation = (success, lat, lng) => {
      // Create and dispatch a custom event
      try {
        const event = new CustomEvent('user-location-ready', { 
          detail: { success, lat, lng } 
        });
        document.dispatchEvent(event);
        console.log("Dispatched user-location-ready event");
      } catch (e) {
        console.error("Error dispatching location event:", e);
      }
      
      // Set map view with error handling
      try {
        map.setView([lat, lng], defaultZoom);
      } catch (e) {
        console.error("Error setting map view:", e);
      }
    };

    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        function(position) {
          const userLat = position.coords.latitude;
          const userLng = position.coords.longitude;

          // Add a special marker for user location
          if (userMarker) {
            try {
              map.removeLayer(userMarker);
            } catch(e) {
              console.warn("Could not remove existing user marker:", e);
            }
          }

          try {
            // Custom HTML/CSS marker for user location with pulsing effect
            const userIcon = L.divIcon({
              className: 'user-location-marker',
              html: '<div class="pulse"></div><i class="fas fa-circle"></i>',
              iconSize: [24, 24],
              iconAnchor: [12, 12]
            });
            
            userMarker = L.marker([userLat, userLng], {
              icon: userIcon,
              zIndexOffset: 1000 // Ensure it's above other markers
            }).addTo(map);
            
            // Add a tooltip
            userMarker.bindTooltip("You are here", {
              permanent: false,
              direction: 'top',
              offset: [0, -10]
            });
          } catch (e) {
            console.error("Error adding user location marker:", e);
          }

          // Center map on user location
          try {
            map.setView([userLat, userLng], defaultZoom);
            console.log("Map centered on user location");
            
            // Log user's coordinates for debugging
            console.log("User location found:", userLat, userLng);
          } catch (e) {
            console.error("Error centering map on user location:", e);
          }

          if (callback) callback(true, { lat: userLat, lng: userLng });
          
          // Dispatch the location ready event
          dispatchLocation(true, userLat, userLng);
        },
        function(error) {
          console.warn("Error getting user location:", error.message);
          
          // If error getting location, use default
          if (callback) callback(false, null);
          
          // Dispatch the location ready event with the default location
          dispatchLocation(false, defaultLocation[0], defaultLocation[1]);
        },
        {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 60000
        }
      );
    } else {
      console.warn("Geolocation is not supported by this browser");
      if (callback) callback(false, null);
      
      // Dispatch the location ready event with the default location
      dispatchLocation(false, defaultLocation[0], defaultLocation[1]);
    }
  }

  // Public API
  return {
    init: initMap,
    addMarker: addMarker,
    clearMarkers: clearMarkers,
    getUserLocation: getUserLocation,
    updateVisibleEvents: updateVisibleEvents,
    highlightMarker: highlightMarker,
    filterMarkers: filterMarkers
  };
})();