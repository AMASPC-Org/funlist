generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model health_check {
  id         Int       @id @default(autoincrement())
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
}

// Generic scores table for multi-brand scoring systems
model Score {
  id           String   @id @default(uuid())
  brand        String // funlist, businesscalendar
  system       String // Funalytics, ConnectScore, Elevate
  entityType   String   @map("entity_type") // event, venue, experience
  entityId     Int      @map("entity_id")
  overallScore Float    @map("overall_score") @db.Real
  dimensions   Json // JSON object with dynamic dimension scores
  reasoning    String?  @db.VarChar(500)
  status       String   @default("completed") // pending, computing, completed, failed
  computedAt   DateTime @default(now()) @map("computed_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([brand, system, entityType, entityId, computedAt])
  @@index([brand, system, entityType, entityId])
  @@index([computedAt(sort: Desc)])
  @@map("scores")
}

// Events table (using plural 'events' table which has data)
model Event {
  id              Int       @id @default(autoincrement())
  status          String?   @default("pending")
  title           String
  description     String
  start_date      DateTime  @db.Date
  end_date        DateTime  @db.Date
  start_time      DateTime? @db.Time
  end_time        DateTime? @db.Time
  all_day         Boolean?  @default(false)
  street          String
  city            String
  state           String
  zip_code        String
  latitude        Float?    @db.DoublePrecision
  longitude       Float?    @db.DoublePrecision
  created_at      DateTime? @default(now())
  category        String
  target_audience String
  fun_meter       Int
  user_id         Int
  venue_id        Int?
  location        String?
  fun_rating      Int?

  // Relations
  user              User              @relation(fields: [user_id], references: [id])
  venue             Venue?            @relation(fields: [venue_id], references: [id])
  funalytics_scores FunalyticsScore[]

  @@map("events")
}

// Users table
model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  password_hash  String?
  created_at     DateTime @default(now())
  account_active Boolean  @default(true)
  username       String?
  first_name     String?
  last_name      String?
  is_admin       Boolean? @default(false)
  company_name   String?

  // Relations
  events Event[]
  venues Venue[]

  @@map("users")
}

// Venues table
model Venue {
  id         Int       @id @default(autoincrement())
  name       String
  street     String?
  city       String?
  state      String?
  zip_code   String?
  phone      String?
  email      String?
  website    String?
  created_at DateTime? @default(now())
  user_id    Int?
  latitude   Float?    @db.DoublePrecision
  longitude  Float?    @db.DoublePrecision

  // Relations
  user   User?   @relation(fields: [user_id], references: [id])
  events Event[]

  @@map("venues")
}

// Legacy Funalytics scores table
model FunalyticsScore {
  id             String    @id @default(uuid()) @db.Uuid
  event_id       Int
  community_vibe Int?
  family_fun     Int?
  overall_score  Int?
  reasoning      String?
  computed_at    DateTime? @default(now()) @db.Timestamptz

  // Relations
  event Event @relation(fields: [event_id], references: [id])

  @@map("funalytics_scores")
}
