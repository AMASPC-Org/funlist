
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startTime: 'startTime',
  endTime: 'endTime',
  location: 'location',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  latitude: 'latitude',
  longitude: 'longitude',
  category: 'category',
  organizerId: 'organizerId',
  venueId: 'venueId',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  company_name: 'company_name',
  email: 'email',
  password_hash: 'password_hash',
  phone: 'phone',
  is_organizer: 'is_organizer',
  is_sponsor: 'is_sponsor',
  is_vendor: 'is_vendor',
  is_admin: 'is_admin',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.VenueScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  city: 'city',
  state: 'state',
  zip_code: 'zip_code',
  latitude: 'latitude',
  longitude: 'longitude',
  capacity: 'capacity',
  venue_type_id: 'venue_type_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.FunalyticsScoreScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  communityVibe: 'communityVibe',
  familyFun: 'familyFun',
  overallScore: 'overallScore',
  reasoning: 'reasoning',
  computedAt: 'computedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Event: 'Event',
  User: 'User',
  Venue: 'Venue',
  FunalyticsScore: 'FunalyticsScore'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/runner/workspace/api/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/runner/workspace/api/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Event {\n  id          Int       @id @default(autoincrement())\n  title       String\n  description String?\n  startTime   DateTime\n  endTime     DateTime?\n  location    String?\n  city        String?\n  state       String?\n  zipCode     String?\n  latitude    Float?\n  longitude   Float?\n  category    String?\n  organizerId Int?\n  venueId     Int?\n  status      String?   @default(\"pending\")\n  created_at  DateTime? @default(now())\n  updated_at  DateTime? @default(now())\n\n  // Relations\n  organizer  User?             @relation(fields: [organizerId], references: [id])\n  venue      Venue?            @relation(fields: [venueId], references: [id])\n  funalytics FunalyticsScore[]\n\n  @@map(\"events\")\n}\n\nmodel User {\n  id            Int       @id @default(autoincrement())\n  first_name    String?\n  last_name     String?\n  company_name  String?\n  email         String    @unique\n  password_hash String?\n  phone         String?\n  is_organizer  Boolean?  @default(false)\n  is_sponsor    Boolean?  @default(false)\n  is_vendor     Boolean?  @default(false)\n  is_admin      Boolean?  @default(false)\n  is_active     Boolean?  @default(true)\n  created_at    DateTime? @default(now())\n  updated_at    DateTime? @default(now())\n\n  // Relations\n  events Event[]\n\n  @@map(\"users\")\n}\n\nmodel Venue {\n  id            Int       @id @default(autoincrement())\n  name          String?\n  address       String?\n  city          String?\n  state         String?\n  zip_code      String?\n  latitude      Float?\n  longitude     Float?\n  capacity      Int?\n  venue_type_id Int?\n  created_at    DateTime? @default(now())\n  updated_at    DateTime? @default(now())\n\n  // Relations\n  events Event[]\n\n  @@map(\"venues\")\n}\n\nmodel FunalyticsScore {\n  id            String   @id @default(dbgenerated(\"gen_random_uuid()\"))\n  eventId       Int      @map(\"event_id\")\n  communityVibe Int?     @map(\"community_vibe\")\n  familyFun     Int?     @map(\"family_fun\")\n  overallScore  Int?     @map(\"overall_score\")\n  reasoning     String?\n  computedAt    DateTime @default(now()) @map(\"computed_at\")\n\n  // Relations\n  event Event @relation(fields: [eventId], references: [id])\n\n  @@index([eventId, computedAt(sort: Desc)])\n  @@map(\"funalytics_scores\")\n}\n",
  "inlineSchemaHash": "59c2954d23da548e01629ff244df7451b7493f03f8379e0869e7245894a49416",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Event\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"zipCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"venueId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"organizer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EventToUser\"},{\"name\":\"venue\",\"kind\":\"object\",\"type\":\"Venue\",\"relationName\":\"EventToVenue\"},{\"name\":\"funalytics\",\"kind\":\"object\",\"type\":\"FunalyticsScore\",\"relationName\":\"EventToFunalyticsScore\"}],\"dbName\":\"events\"},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"first_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"last_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"company_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password_hash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"is_organizer\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"is_sponsor\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"is_vendor\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"is_admin\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"is_active\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"events\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToUser\"}],\"dbName\":\"users\"},\"Venue\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"zip_code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"capacity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"venue_type_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"events\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToVenue\"}],\"dbName\":\"venues\"},\"FunalyticsScore\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"eventId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"event_id\"},{\"name\":\"communityVibe\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"community_vibe\"},{\"name\":\"familyFun\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"family_fun\"},{\"name\":\"overallScore\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"overall_score\"},{\"name\":\"reasoning\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"computedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"computed_at\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToFunalyticsScore\"}],\"dbName\":\"funalytics_scores\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

